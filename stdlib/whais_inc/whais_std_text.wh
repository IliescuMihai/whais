##############################################################################
# WHAIS - An advanced database system
# Copyright (C) 2014 - 2018  Iulian Popa
#
# Address: Str Olimp nr. 6
#           Pantelimon Ilfov,
#           Romania
# Phone:   +40721939650
# e-mail:  popaiulian@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################

#@guard whais_std_text


#Check if the character is an upper case character.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is upper case.
EXTERN PROCEDURE is_upper (c CHAR) RETURN BOOL;

#Check if the character is a lower case character.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is lower case.
EXTERN PROCEDURE is_lower (c CHAR) RETURN BOOL;

#Check if the character is a decimal digit.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is a decimal digit.
EXTERN PROCEDURE is_digit (c CHAR) RETURN BOOL;

#Check if the character is an alpha character.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is an alpha character.
EXTERN PROCEDURE is_alpha (c CHAR) RETURN BOOL;

#Check if the character is a space character.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is a space (e.g. white space, tab, etc.) character.
EXTERN PROCEDURE is_space (c CHAR) RETURN BOOL;

#Check if the character is a punctuation mark.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is a punctuation mark (e.g. .;:!? etc.).
EXTERN PROCEDURE is_punct (c CHAR) RETURN BOOL;

#Check if the character is printable.
#In:
#   @c - The character.
#Out:
#   TRUE if the character is printable.
EXTERN PROCEDURE is_print (c CHAR) RETURN BOOL;


#Retrieve the Unicode code point of a WHAIS character,
#In:
#   @c - The character.
#Out:
#   An integer value holding the code point value.
EXTERN PROCEDURE unicode_cp (c CHAR) RETURN UINT32;

#Retrieve the upper case correspondent of a WHAIS character.
#In:
#   @c - The character.
#Out:
#   The corresponded character if there is one, or the character itself if 
#   it does not have an upper case corresponded.
EXTERN PROCEDURE upper (c CHAR) RETURN CHAR;

#Retrieve the lower case correspondent of a WHAIS character.
#In:
#   @c - The character.
#Out:
#   The corresponded character if there is one, or the character itself if 
#   it does not not have a lower case corresponded.
EXTERN PROCEDURE lower (c CHAR) RETURN CHAR;

#Get the converted all to upper case text.
#In:
#   @t - The text.
#Out:
#   A text with the same characters as the original, but with all characters
#   upper case converted.
EXTERN PROCEDURE upper_all (t TEXT) RETURN TEXT;

#Get the converted all to lower case text.
#In:
#   @t - The text.
#Out:
#   A text with the same characters as the original, but with all characters
#   lower case converted.
EXTERN PROCEDURE lower_all (t TEXT) RETURN TEXT;

#Get the UTF-8 representation of a text.
#In:
#   @t - The text.
#Out:
#   An array holding the UTF-8 representation.
EXTERN PROCEDURE to_utf8 (t TEXT) RETURN  UINT8 ARRAY;

#Get the a WHAIS text from the UTF-8 representation.
#In:
#   @s - An array holding the UTF-8 code units.
#Out:
#   A text holding the corresponded of the UTF-8 text.
EXTERN PROCEDURE from_utf8 (s UINT8 ARRAY) RETURN TEXT;

#Get the UTF-16 representation of a text.
#In:
#   @t - The text.
#Out:
#   An array holding the UTF-16 representation.
EXTERN PROCEDURE to_utf16 (t TEXT) RETURN  UINT16 ARRAY;

#Get the a WHAIS text from the UTF-16 representation.
#In:
#   @s - An array holding the UTF-16 code units.
#Out:
#   A text holding the corresponded of the UTF-16 text.
EXTERN PROCEDURE from_utf16 (s UINT16 ARRAY) RETURN TEXT;

#Transform a WHAIS text an array of characters.
#In:
#   @t - The text.
#Out:
#   An array holding the original text characters.
EXTERN PROCEDURE text_to_array (t TEXT) RETURN  CHAR ARRAY;

#Convert an array of characters to a text.
#In:
#   @s - An array holding the text characters.
#Out:
#   The corresponding text value,
EXTERN PROCEDURE text_from_array (s CHAR ARRAY) RETURN TEXT;

#Get the characters text count.
#In:
#   @t - The text value.
#Out:
#   The count of the text's characters.
EXTERN PROCEDURE length (t TEXT) RETURN UINT64;

#Get a hash code for a text.
#In:
#   @t - The text value.
#Out:
#   The hash code.
EXTERN PROCEDURE hash_text (t TEXT) RETURN UINT64;

#Find a character in a text.
#In:
#   @source - Text source text.
#   @ch     - The character to look for.
#   @case   - TRUE to ignore casing.
#   @from   - The start position to look from.
#   @to     - Last position to look to.
#Out:
#   The offset position where the character was found, NULL if it was not found.
EXTERN PROCEDURE find_char( source TEXT,
                            ch CHAR, 
                            case BOOL,
                            from UINT64,
                            to UINT64) RETURN UINT64;

#Find a substring in a text.
#In:
#   @source - Text source text.
#   @str    - The substring to look for.
#   @case   - TRUE to ignore casing.
#   @from   - The start position to look from.
#   @to     - Last position to look to.
#Out:
#   The offset position where the substring was found, NULL if it was not found.
EXTERN PROCEDURE find_str( source TEXT,
                           str TEXT, 
                           case BOOL,
                           from UINT64,
                           to UINT64) RETURN UINT64;
                                 
#Replace a substring in a text.
#In:
#   @source - Text source text.
#   @str    - The substring to look for.
#   @newStr - The new substring
#   @case   - TRUE to ignore casing.
#   @from   - The start position to look from.
#   @to     - Last position to look to.
#Out:
#   A text holding the resulted content.
EXTERN PROCEDURE replace_str(source TEXT,
                             str TEXT,
                             newStr TEXT, 
                             case BOOL,
                             from UINT64,
                             to UINT64) RETURN TEXT;
                             
# Compare two text strings.
#In:
#   @first  - Text source text.
#   @second - The substring to look for.
#   @case   - TRUE to ignore casing.
#   @alph   - TRUE to compare alphabetically.
#Out:
#   The offset position where the substring was found, NULL if it was not found.
EXTERN PROCEDURE compare(first TEXT,
                         second TEXT, 
                         alph BOOL,
                         case BOOL) RETURN INT32;

# Retrieve the integer value of a digit character of a numeric system.
#In:
#   @d    - The character holding the digit.
#   @base - The numeric base system.
#Out:
#   The integer value of the digit, NULL if the base is not supported
#   or the provided character is not a valid digit.
EXTERN PROCEDURE digit(d CHAR, base UINT8) RETURN UINT8; 


# Convert a text value to an integer value.
#In:
#   @n     - The number representation.
#   @base  - The numeric base system of the representation.
#   @start - The index from the to start the parsing of the text value.
#Out:
#   The integer value of the digit, NULL if the base is not supported
#   or the provided character is not a valid digit.
EXTERN PROCEDURE to_uint(n TEXT, base UINT8, start UINT64) RETURN UINT64; 


# Get the text representation of a text.
#In:
#   @n     - The positive integer.
#   @base  - The numeric base system of the representation.
#Out:
#   It returns the text representation of the number (according with supplied numeric system base) 
#   or NULL in case of errors (e.g. the numeric base is not supported,
#   or the number itself is NULL).
EXTERN PROCEDURE from_uint(n UINT64, base UINT8) RETURN TEXT;

