##############################################################################
# WHAIS - An advanced database system
# Copyright (C) 2008  Iulian Popa
#
# Address: Str Olimp nr. 6
#           Pantelimon Ilfov,
#           Romania
# Phone:   +40721939650
# e-mail:  popaiulian@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################
##############################################################################
# Describes common WHAIS procedures signatures used to manipulate WHAIS'
# table's fields in user defined procedures.
##############################################################################

#@guard whais_std_field


#Retrieve the table that a field belongs to.
#In:
#   @column - A field value.
#Out:
#   If successfully, this will return the table that store the field's values.
EXTERN PROCEDURE get_table(column FIELD) RETURN TABLE;

#Check if the values of a table field are indexed.
#In:
#   @column - A field value.
#Out:
#   TRUE if the field values are indexed. 
EXTERN PROCEDURE is_indexed(column FIELD) RETURN BOOL;

#Get the associated name of a table's field.
#In:
#   @column - A field value.
#Out:
#   A text holding the table field's name used by the provided field. 
EXTERN PROCEDURE get_name(column FIELD) RETURN TEXT;

#Retrieves the rows indexes holding values that are in a supplied interval 
#of values.
#In:
#   @column  - The field value.
#   @min     - The lower bound of the value interval.
#   @max     - The upper bound of the value interval.
#   @row     - Search from this row upward.
#   @row     - Search until this row.
#Out:
#   An array holding the rows indexes that holds value in the interval hold by
#   [@v_min, @v_max].
EXTERN PROCEDURE match_rows(column FIELD,
                            min UNDEFINED,
                            max UNDEFINED,
                            from UINT32,
                            to UINT32) RETURN UINT32 ARRAY;

#Check the provided rows if they hold a certain value. 
#In:
#   @column    - The field value.
#   @values    - The set values to check against.
#   @rows      - List of rows to test.
#   @addNull   - TRUE if the NULL value should be added into the test set.
#   @filterOut - If TRUE then a row should be added to the result if is not
#                holding a value specified in the set above.
#Out:
#   An array holding the rows indexes that holds value in the interval hold by
#   [@v_min, @v_max].
EXTERN PROCEDURE filter_rows(column FIELD,
                             values ARRAY,
                             rows UINT32 ARRAY,
                             addNull BOOL,
                             filterOut BOOL) RETURN UINT32 ARRAY;


#Retrieve the row holding the lowest from the specified field values.
#In:
#   @column - The field value.
#   @min     - Search only for non null values that are bigger or equal with
#              this one. 
#Out:
#   A list of rows holding the field's smallest found value.
EXTERN PROCEDURE get_smallest (column FIELD,
                               min UNDEFINED) RETURN UINT32 ARRAY;


#Retrieve the row holding the biggest from the specified field values.
#In:
#   @column - The field value.
#   @max     - Search only for non-null values that are less or equal with 
#              this one.
#Out:
#   A list of rows holding the fields' biggest found value.
EXTERN PROCEDURE get_biggest (column FIELD, 
                              max UNDEFINED) RETURN UINT32 ARRAY;