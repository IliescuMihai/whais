##############################################################################
# WHAIS - An advanced database system
# Copyright (C) 2008  Iulian Popa
#
# Address: Str Olimp nr. 6
#           Pantelimon Ilfov,
#           Romania
# Phone:   +40721939650
# e-mail:  popaiulian@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################
##############################################################################
# Describes common WHAIS procedures signatures used to manipulate WHAIS'
# array of values in user procedures.
##############################################################################

#@guard whais_std_array


#Get the count of elements from an array.
EXTERN PROCEDURE array_count( a AS ARRAY) RETURN UINT64;

#Sort the elements of array
#In:
#   @a - The original array.
#   @r - Set to TRUE to sort reversely.
#Out:
#   Another array but with the elements sort based on the specified order.
EXTERN PROCEDURE array_sort( a AS ARRAY, r AS BOOL) RETURN ARRAY;

#Binary search for an array element
#In:
#   @a - The array.
#   @v - A generic value
#   @s - Search type: NULL (or O) exact match only, 
#                     > 0 match or smallest next,
#                     < 0 match of biggest prev;
#Out:
#   An index in the array holding the required criteria, NULL if not found.
EXTERN PROCEDURE array_binary_search (a AS ARRAY,
                                      v AS UNDEFINED,
                                      s AS INT8) RETURN UINT64;


#Search for an array element
#In:
#   @a - The array.
#   @v - A generic value
#Out:
#   The index in the array holding the requested element, NULL if not found.
EXTERN PROCEDURE array_search (a AS ARRAY,
                               v AS UNDEFINED) RETURN UINT64;

#Search the smallest element.
#In:
#   @a - The array.
#Out:
#   The index in the array holding the smallest element.
EXTERN PROCEDURE array_min (a AS ARRAY) RETURN UINT64;

#Search the biggest element.
#In:
#   @a - The array.
#Out:
#   The index in the array holding the biggest element.
EXTERN PROCEDURE array_max (a AS ARRAY) RETURN UINT64;

#For arrays holding numerical values, compute the average of the values.
#In:
#   @a - The array.
#Out:
#   The computed average value.
EXTERN PROCEDURE array_average (a AS ARRAY) RETURN RICHREAL;

#Set operations with array elements.
EXTERN PROCEDURE array_intersection (a1 AS ARRAY, a2 AS ARRAY) RETURN ARRAY;
EXTERN PROCEDURE array_union (a1 AS ARRAY, a2 AS ARRAY) RETURN ARRAY;
EXTERN PROCEDURE array_diff (a1 AS ARRAY, a2 AS ARRAY) RETURN ARRAY;

#Add an element into an array
EXTERN PROCEDURE array_pushback (a1 AS ARRAY, v AS UNDEFINED) RETURN ARRAY;

#Truncate an array.
EXTERN PROCEDURE array_truncate (a1 AS ARRAY, c AS UINT64) RETURN ARRAY;

#Compute the corresponding array hash value.
EXTERN PROCEDURE array_hash (a AS ARRAY) RETURN UINT64;