##############################################################################
# WHAIS - An advanced database system
# Copyright (C) 2008  Iulian Popa
#
# Address: Str Olimp nr. 6
#           Pantelimon Ilfov,
#           Romania
# Phone:   +40721939650
# e-mail:  popaiulian@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################
##############################################################################
# Describes common WHAIS procedures signatures used to manipulate WHAIS'
# tables in user defined procedures.
##############################################################################


#@guard whais_std_table

#Check if a table is persistent.
#In:
#   @t - The table value.
#Out:
#   TRUE if the table is persistent.
EXTERN PROCEDURE table_is_peristent( t AS TABLE) RETURN BOOL;

#Get the fields count of a table.
#In:
#   @t - The table value.
#Out:
#   The fields count of the supplied tabled.
EXTERN PROCEDURE table_fields_count( t AS TABLE) RETURN UINT64;

#Get a field of a table by id.
#In:
#   @t - The table value.
#   @i - Field index.
#Out:
#   A value holding the corresponding field.
EXTERN PROCEDURE table_field_by_id( t AS TABLE, 
                                    i AS UINT64) RETURN FIELD;
 
#Get the rows count of a table.
#In:
#   @t - The table value.
#Out:
#   The numbers of rows allocated by the supplied table.
EXTERN PROCEDURE table_rows( t AS TABLE) RETURN UINT64;

#Allocate a row into a table.
#In:
#   @t - The table value.
#Out:
#   The index of the allocated row.
EXTERN PROCEDURE table_add_row( t AS TABLE) RETURN UINT64;

#Find a reusable row onto a table (or allocates a row if none is found).
#A row is considered to be reusable if all fields values are set to NULL.
#In:
#   @t - The table value.
#Out:
#   The founded row index.
EXTERN PROCEDURE table_reusable_row( t AS TABLE) RETURN UINT64;

#Mark a row to reuse (e.g. set all rows's field values to NULL).
#In:
#   @t - The table value.
#   @r - The tables' row.
#Out:
#   The provided row index.
EXTERN PROCEDURE table_reuse_row( t AS TABLE,
                                  r AS UINT64) RETURN BOOL;
                                     
#Exchange the content of two tables' rows.
#In:
#   @t  - The table value
#   @r1 - First row.
#   @r2 - Second row.
#Out:
#    TRUE if the exchange was made.
EXTERN PROCEDURE table_exchg_rows( t AS TABLE,
                                   r1 AS UINT64,
                                   r2 AS UINT64) RETURN BOOL;

#Sort table rows.
#In:
#   @t - The table;
#   @f - Array of integer values with the fields to sort in order of priority.
#   @o - For each provided field onto @f specifies the reversing sort order if
#        is the case (e.g. set the value from the same array index to TRUE).
#Out:
#   The same table provided.
EXTERN PROCEDURE table_sort( t AS TABLE,
                             fields AS ARRAY,
                             reverse AS ARRAY OF BOOL) RETURN TABLE;