##############################################################################
# WHAIS - An advanced database system
# Copyright (C) 2014 - 2018  Iulian Popa
#
# Address: Str Olimp nr. 6
#           Pantelimon Ilfov,
#           Romania
# Phone:   +40721939650
# e-mail:  popaiulian@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################


#@guard whais_std_table
    
#Check if a table is persistent.
#In:
#   @t - The table.
#Out:
#   TRUE if the table is persistent.
EXTERN PROCEDURE is_persistent( t TABLE) RETURN BOOL;

#Get the fields count of a table.
#In:
#   @t - The table value.
#Out:
#   The count of the tables' fields.
EXTERN PROCEDURE count_fields( t TABLE) RETURN UINT16;

#Get a field of a table by index.
#In:
#   @t - The table value.
#   @i - Field's index.
#Out:
#   A value holding the corresponding field.
EXTERN PROCEDURE get_fieldth (t TABLE, 
                              i UINT16) RETURN FIELD;


#Get a field of a table by name.
#In:
#   @t - The table value.
#   @name - Field name.
#Out:
#   A value holding the corresponding field.
EXTERN PROCEDURE get_field ( t TABLE, 
                             name TEXT) RETURN FIELD;
 
#Get the rows count of a table.
#In:
#   @t - The table value.
#   @mpties - True if it should count only
#   	      the empty rows.
#Out:
#   The number of the rows after count.
EXTERN PROCEDURE count_rows( t TABLE,
                             empties BOOL) RETURN UINT32;

#Allocate a row into a table.
#In:
#   @t - The table value.
#Out:
#   The index of the allocated row.
EXTERN PROCEDURE add_row( t TABLE) RETURN UINT32;

#Find a reusable row onto a table (or allocates a row if none is found).
#A row is considered to be reusable if all fields values are set to NULL.
#In:
#   @t - The table value.
#Out:
#   The founded row index.
EXTERN PROCEDURE get_empty( t TABLE) RETURN UINT32;

#Mark a row to reuse (e.g. set all rows's field values to NULL).
#In:
#   @t - The table value.
#   @r - The tables' row.
#Out:
#   TRUE if the row was emptied.
EXTERN PROCEDURE empty_row( t TABLE,
                            r UINT32) RETURN BOOL;

#Exchange the content of two tables' rows.
#In:
#   @t  - The table value
#   @r1 - First row.
#   @r2 - Second row.
#Out:
#    TRUE if the exchange was made.
EXTERN PROCEDURE exchg_rows( t TABLE,
                             r1 UINT32,
                             r2 UINT32) RETURN BOOL;

#Sort table rows.
#In:
#   @t         - The table;
#   @fields    - Array with the fields to sort in order of priority.
#   @direction - For each provided field onto @fields specifies the direction 
#                of the sort. That is a true value is for ascending sort and 
#                a false value for descending. If a value is missing the sort
#                will be ascending.
#   @from      - The row from where the sort should start (partial table sort).
#   @to        - The last row of a partial sort.
#Out:
#   True if the sort was successful.
EXTERN PROCEDURE sort_table( t TABLE,
                             columns UINT16 ARRAY,
                             reverse BOOL ARRAY,
                             from UINT32,
                             to   UINT32) RETURN BOOL;
                             
